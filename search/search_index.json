{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About Logic","text":"<p>Logic is a universal programmable toy designed for teaching programming developed at Robot\u00e1rna.</p> <p>Logic resembles a game console. It has 105 RGB LEDs that can serve as a display, it has numerous buttons and a buzzer. Under the hood, it is powered by the ESP32 microcontroller.</p> <p>Kids (well, not only them) can create custom games and learn programming while doing so. It is even possible to run multiplayer games as the on-board processor features both, WiFi and Bluetooth 4.</p> <p>This project was prepared for Robotic Camp 2021 \u00ad\u2013 the page is available, however, in Czech. You will find more project there. You can also see our GitHub for find out more about our other projects.</p>"},{"location":"#hw-revisions","title":"HW revisions","text":"<p>There are multiple HW revisions out in the wild, with the v2 being a major overhaul.</p>"},{"location":"#changelog","title":"Changelog:","text":""},{"location":"#v20","title":"v2.0","text":"<ul> <li>new ESP32 S3 chip (instead of \"normal\" ESP32)</li> <li>SD Card slot</li> <li>PMOD connector (a standardized interface to connect various peripherials)</li> <li>revised button layout with two direction crosses</li> <li>piezo instead of just a buzzer (so you can play different tones)</li> <li>brighther smart LEDs</li> </ul> Logic v2Logic v1"},{"location":"install/","title":"Software Development Kit","text":""},{"location":"install/#tldr-version-for-the-skilled-developers","title":"TLDR Version for the Skilled Developers","text":"<p>Logic is powered by the ESP32 microcontroller. We recommend using PlatformIO as the development tool as it can install toolchain and other dependencies automatically. Also, it nicely integrates into many existing text editors and IDEs.</p> <p>We provide a driver library for the board. You can use it in your PlatformIO projects by adding the following line in your <code>platformio.ini</code> project file:</p> <pre><code>lib_deps = https://github.com/RoboticsBrno/Logic_library\n</code></pre> <p>The library provides several examples, project template and documentation. There is also a quick overview of the whole functionality.</p>"},{"location":"install/#step-by-step-guide","title":"Step-by-step guide","text":"<p>If you are a beginner, you might find the following step-by-step tutorial handy. The tutorial targets primarily Windows users (as you know, everything development-related is more complicated on this system). You will need to install:</p> <ol> <li>Editor Visual Studio Code</li> <li>Python<ol> <li>For Windows 8 and higher, you need to download Python from Windows Store</li> <li>For Windows 7 you will need Python 3.8.10</li> </ol> </li> <li>Git version control</li> <li>USB drivers (Windows 7, Windows 8 and higher)</li> <li>PlatformIO plugin for Visual Studio Code</li> </ol>"},{"location":"install/#1-visual-studio-code","title":"1. Visual Studio Code","text":"<p>This is the editor you will use for editing programs. Download it from here  and install it.</p>"},{"location":"install/#2-python","title":"2. Python","text":"<p>The computer has to have the Python programming language runtime installed.</p>"},{"location":"install/#windows-8-windows-10","title":"Windows 8, Windows 10","text":"<p>It is required that you install Python via Window Store, otherwise PlatformIO will not work properly. You can use direct link to Windows Store to obtain it.</p>"},{"location":"install/#windows-7","title":"Windows 7","text":"<p>Download Python 3.8 (newer Pythons will not work on Windows 7) and install it. Make sure that \"Add to PATH\" is checked during the installation.</p>"},{"location":"install/#3-git","title":"3. Git","text":"<p>Download Git and install it. All options can be left on default.</p>"},{"location":"install/#4-logic-drivers","title":"4. Logic drivers","text":"<p>Download the drivers:</p> <ul> <li>Windows 8, Windows 10</li> <li>Windows 7</li> </ul> <p>You have to to extract the whole archive and run the file <code>CP210xVCPInstaller_x64.exe</code>. Follow the guide.</p>"},{"location":"install/#5-platformio-ide-extension","title":"5. Platform.io IDE Extension","text":"<p>Open Visual Studio Code and install platform.io extension:</p> <p> 1. Open VSCode and click the Extensions button on the left panel.</p> <p> 2. Install PlatformIO IDE extension.</p> <p> 3. Wait until all packages are installed.</p> <p> 4. Then also wait for the installation of PlatformIO Core. It can take a while.</p> <p> 5. Once everything is completed, proceed with restart.</p>"},{"location":"install/#6-finished","title":"6. Finished!","text":"<p>Now you should be ready to start developing your own Logic games! You can start with example projects. Open the examples using <code>File</code> -&gt; <code>Open Folder</code>.</p> <p> After opening the example, you have to configure your Logic version. Click to the <code>Defaul &lt;PROJECT&gt;</code> and choose your Logic version.</p> <p> Then you can build and upload the example to your Logic. Use the buttons in the bottom left corner to do so.</p>"},{"location":"manual/","title":"Assembly Manual","text":"<p>If you got your Logic as a kit, we provide you with the following step-by-step guide on its assembly. To assemble it, you will need the following:</p> <ul> <li>a soldering iron</li> <li>pliers</li> <li>philips screwdriver</li> <li>Xacto knife</li> </ul> <p> 1. Make sure you have all the material shown in the photo.</p> <p> 2. Insert the buzzer into the board. Make sure that the polarity matches (the    <code>+</code> smybol on the board matches with the <code>+</code> symbol on the buzzer).</p> <p> 3. Solder the buzzer's leads to the board.</p> <p> 4. Trim the buzzer leads.</p> <p> 5. Cut pin headers and pin sockets as follows:</p> <ul> <li>2\u00d7 pin headers and sockets with 4 pins</li> <li>1\u00d7 pin header and a socket with 7 pins</li> </ul> <p> 6. Trim any burrs on the headers and sockets using an Xacto knife.</p> <p> 7. Finished headers and sockets.</p> <p> 8. Put pin headers inside the sockets.</p> <p> 9. Put the header inside the corresponding pads in the board.</p> <p> 10.  Insert the 4 M3 screws into the board and prepare washers.</p> <p> 11. Insert washers onto the screws.</p> <p> 12. Screw 4 plastic spacers on the screws.</p> <p> 13.  Prepare 4 washers.</p> <p> 14.  Place the washers on the spacers.</p> <p> 15.  Put the top board on the assembly.</p> <p> 16. Prepare 4 M3 screws.</p> <p> 17. Tighten the screws.</p> <p> 18.  Make sure that the headers are inserted into the top board and the sockets      are inserted in the bottom board.</p> <p> 19. Solder the pin headers.</p> <p> 20. Solder the sockets.</p> <p> 21. Finished Logic \u2013 front view.</p> <p> 22. Finished Logic \u2013 back view.</p>"},{"location":"code/buttons/","title":"Buttons","text":""},{"location":"code/buttons/#direct-button-reading","title":"Direct Button Reading","text":"<ul> <li><code>buttons.read(gpio_num_t gpio)</code> :</li> </ul>"},{"location":"code/buttons/#button-names","title":"Button Names","text":"<ul> <li><code>Enter</code></li> <li><code>Up</code></li> <li><code>Down</code></li> <li><code>Left</code></li> <li><code>Right</code></li> <li><code>LeftUp</code></li> <li><code>LeftDown</code></li> <li><code>RightUp</code></li> <li><code>RightDown</code></li> </ul>"},{"location":"code/buttons/#example-usage","title":"Example Usage","text":"<pre><code>#include \"Logic.hpp\"\n#include &lt;iostream&gt;\n\nvoid logicMain() {\n    while (true) {\n        display.clear();\n\n        if(buttons.read(Enter)) {\n            display.drawSquareFilled(3, 3, 4, Rgb(255, 255, 255));\n        }\n        else if(buttons.read(Right)) {\n            display.drawSquareFilled(6, 3, 4, Rgb(255, 255, 255));\n        }\n        else if(buttons.read(Down)) {\n            display.drawSquareFilled(3, 6, 4, Rgb(255, 255, 255));\n        }\n        else if(buttons.read(Left)) {\n            display.drawSquareFilled(0, 3, 4, Rgb(255, 255, 255));\n        }\n        else if(buttons.read(Up)) {\n            display.drawSquareFilled(3, 0, 4, Rgb(255, 255, 255));\n        }\n        display.show(30);\n    }\n}\n</code></pre>"},{"location":"code/buttons/#event-based-button-handling","title":"Event-based Button Handling","text":""},{"location":"code/buttons/#buttonsonchange","title":"buttons.onChange","text":"<pre><code>buttons.onChange([](std::bitset&lt;MaxID&gt; currentState, std::bitset&lt;MaxID&gt; buttonChange) {\n    if (buttonChange[up] == 1) {\n\n        std::cout &lt;&lt; \"Button Up has changed and is now \";\n\n        if (currentState[Up] == 1) {\n            std::cout &lt;&lt; \"pressed.\" &lt;&lt; std::endl;\n        } else {\n            std::cout &lt;&lt; \"released.\" &lt;&lt; std::endl;\n        }\n    }\n});\n\nbuttons.onChange([](std::bitset&lt;MaxID&gt; currentState) {\n    std::cout &lt;&lt; \"Button Up is now \";\n\n    if (currentState[Up] == 1) {\n        std::cout &lt;&lt; \"pressed.\" &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; \"released.\" &lt;&lt; std::endl;\n    }\n});\n\nbuttons.onChange([]() {\n        std::cout &lt;&lt; \"A button has changed. No more information available\" &lt;&lt; std::endl;\n    });\n\nbuttons.onChange([](std::bitset&lt;MaxID&gt; currentState, std::bitset&lt;MaxID&gt; buttonChange) {\n    std::cout &lt;&lt; \"You will see this only when Button Down changes, and the button is now \";\n\n    if (currentState[Down] == 1) {\n        std::cout &lt;&lt; \"pressed.\" &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; \"released.\" &lt;&lt; std::endl;\n    }\n}, Down);\n\nbuttons.onChange([](bool isPressed) {\n    std::cout &lt;&lt; \"You will see this only when Button Down changes\" &lt;&lt; std::endl;\n\n    if (isPressed == 1) {\n        std::cout &lt;&lt; \"pressed.\" &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; \"released.\" &lt;&lt; std::endl;\n    }\n}, Down);\n\n\nbuttons.onChange([]() {\n    std::cout &lt;&lt; \"You will see this only when Button Down changes\" &lt;&lt; std::endl;\n}, Down);\n</code></pre>"},{"location":"code/buttons/#buttonsonpress","title":"buttons.onPress","text":"<pre><code>buttons.onPress([](std::bitset&lt;MaxID&gt; currentState, std::bitset&lt;MaxID&gt; changed) {\n    std::cout &lt;&lt; \"A button has been pressed. \";\n\n    if (changed[Right] == 1) {\n        std::cout &lt;&lt; \"It was the Right button\" &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; \"It was not the Right button\" &lt;&lt; std::endl;\n    }\n});\n\nbuttons.onPress([](std::bitset&lt;MaxID&gt; currentState) {\n    std::cout &lt;&lt; \"A button has been pressed. \";\n\n    std::cout &lt;&lt; \"Buttons \";\n\n    for(int i = 0; i &lt; MaxID; i++) {\n        if (currentState[i] == 1) {\n            std::cout &lt;&lt; i &lt;&lt; \", \";\n        }\n    }\n\n    std::cout &lt;&lt; \"are now pressed.\" &lt;&lt; std::endl;\n});\n\nbuttons.onPress([]() {\n    std::cout &lt;&lt; \"A button has been pressed. No more information available\" &lt;&lt; std::endl;\n});\n\nbuttons.onPress([]() {\n    std::cout &lt;&lt; \"You will see this only when Button Left get pressed down.\" &lt;&lt; std::endl;\n}, Left);\n</code></pre>"},{"location":"code/buttons/#buttonsonrelease","title":"buttons.onRelease","text":"<pre><code>buttons.onRelease([](std::bitset&lt;MaxID&gt; currentState, std::bitset&lt;MaxID&gt; changed) {\n    std::cout &lt;&lt; \"A button has been released. \";\n\n    if (changed[Right] == 0) {\n        std::cout &lt;&lt; \"It was the Right button\" &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; \"It was not the Right button\" &lt;&lt; std::endl;\n    }\n});\n\nbuttons.onRelease([](std::bitset&lt;MaxID&gt; currentState) {\n    std::cout &lt;&lt; \"A button has been released. \";\n\n    std::cout &lt;&lt; \"Buttons \";\n\n    for(int i = 0; i &lt; MaxID; i++) {\n        if (currentState[i] == 0) {\n            std::cout &lt;&lt; i &lt;&lt; \", \";\n        }\n    }\n\n    std::cout &lt;&lt; \"are now released.\" &lt;&lt; std::endl;\n});\n\nbuttons.onRelease([]() {\n    std::cout &lt;&lt; \"A button has been released. No more information available\" &lt;&lt; std::endl;\n});\n\nbuttons.onRelease([]() {\n    std::cout &lt;&lt; \"You will see this only when Button Left gets released.\" &lt;&lt; std::endl;\n}, Left);\n</code></pre>"},{"location":"code/buzzer/","title":"Buzzer","text":""},{"location":"code/buzzer/#example-usage","title":"Example usage","text":"Logic v2.*Logic v1.* <ul> <li><code>bool isOn()</code> :</li> <li><code>void on()</code> :</li> <li><code>void off()</code> :</li> <li><code>void setFrequency(std::uint32_t frequency)</code> :<ul> <li>This function sets the frequency of the buzzer. The frequency is in Hz.</li> </ul> </li> </ul> <pre><code>#include \"Logic.hpp\"\n#include &lt;iostream&gt;\n\nvoid logicMain() {\n    while (true) {\n        if(buttons.read(Enter)) {\n            buzzer.on();\n        } else\n        {\n            buzzer.off();\n        }\n    }\n\n}\n</code></pre> <ul> <li><code>bool isOn()</code> :</li> <li><code>void on()</code> :</li> <li><code>void off()</code> :</li> </ul> <pre><code>#include \"Logic.hpp\"\n#include &lt;iostream&gt;\n\nvoid logicMain() {\n    while (true) {\n        if(buttons.read(Enter)) {\n            buzzer.on();\n        } else\n        {\n            buzzer.off();\n        }\n    }\n\n}\n</code></pre>"},{"location":"code/display/","title":"Display","text":"<ul> <li> <p><code>Rgb&amp; at(int x, int y)</code> :   Return a reference to a pixel on that position</p> </li> <li> <p><code>void setColor(int x, int y, Rgb color)</code> : Set the color of a pixel at a specified position</p> </li> <li> <p><code>void clear()</code> :    Clear the display</p> </li> <li> <p><code>void fill(Rgb color)</code> :    Fill the display with color</p> </li> <li> <p><code>void drawRectangle(int x, int y, int width, int height, Rgb color, int strokeWidth = 1)</code> : Draw a rectangle with specified parameters</p> </li> <li> <p><code>void drawRectangle(const Rectangle&amp; rect, Rgb color, int strokeWidth = 1)</code> :   Draw a rectangle with specified parameters</p> </li> <li> <p><code>void drawRectangleFilled(int x, int y, int width, int height, Rgb color)</code> :    Draw a filled rectangle with specified parameters</p> </li> <li> <p><code>void drawRectangleFilled(const Rectangle&amp; rect, Rgb color)</code> : Draw a filled rectangle with specified parameters</p> </li> <li> <p><code>void drawSquare(int x, int y, int size, Rgb color, int strokeWidth = 1)</code> : Draw a square with specified parameters</p> </li> <li> <p><code>void drawSquareFilled(int x, int y, int size, Rgb color)</code> :    Draw a filled square with specified parameters</p> </li> <li> <p><code>void drawCircle(int centerX, int centerY, int radius, Rgb color)</code> :    Draw a circle with specified parameters</p> </li> <li> <p><code>void drawCircleFilled(int centerX, int centerY, int radius, Rgb color)</code> : Draw a filled circle with specified parameters</p> </li> <li> <p><code>void drawLine(int x1, int y1, int x2, int y2, Rgb color, int strokeWidth = 1)</code> :   Draw a line</p> </li> <li> <p><code>void show(int intensity = 255)</code> : Show a prepared frame on the display</p> </li> </ul>"},{"location":"code/display/#example","title":"Example","text":"<pre><code>#include \"Logic.hpp\"\n#include &lt;iostream&gt;\n\nvoid logicMain() {\n    while (true)\n    {\n        display.fill(Rgb(255, 0, 0)); //red\n\n        display.show(30);\n        delay(3000);\n        display.clear();\n\n        display.drawLine(1, 0, 8, 0, Rgb(255, 0, 0)); // red\n        display.drawLine(0, 1, 8, 9, Rgb(0, 255, 0)); // green\n\n        display.show(30);\n        delay(3000);\n        display.clear();\n\n        display.drawRectangle(0, 1, 8, 4, Rgb(255, 0, 0)); // red\n        display.drawRectangle(4, 3, 6, 5, Rgb(0, 255, 0)); // green\n\n        display.show(30);\n        delay(3000);\n        display.clear();\n\n        display.drawRectangleFilled(0, 1, 8, 4, Rgb(255, 0, 0)); // red\n        display.drawRectangleFilled(4, 3, 6, 5, Rgb(0, 255, 0)); // green\n\n        display.show(30);\n        delay(3000);\n        display.clear();\n\n        display.drawCircle(3, 3, 2, Rgb(255, 0, 0)); // red\n        display.drawCircle(6, 7, 3, Rgb(0, 255, 0)); // green\n\n        display.show(30);\n        delay(3000);\n        display.clear();\n\n        display.drawCircleFilled(3, 3, 2, Rgb(255, 0, 0)); // red\n        display.drawCircleFilled(6, 7, 3, Rgb(0, 255, 0)); // green\n\n        display.show(30);\n        delay(3000);\n        display.clear();\n\n        display.drawSquare(1, 1, 3, Rgb(255, 0, 0)); //red\n        display.drawSquare(4, 5, 4, Rgb(0, 255, 0)); // green\n\n        display.show(30);\n        delay(3000);\n        display.clear();\n\n        display.drawSquareFilled(1, 1, 3, Rgb(255, 0, 0)); //red\n        display.drawSquareFilled(4, 5, 4, Rgb(0, 255, 0)); // green\n\n        display.show(30);\n        delay(3000);\n        display.clear();\n\n        display.at(0, 0) = Rgb(255, 0, 0); // red\n        display.at(4, 7) = Rgb(0, 255, 0); // green\n    }\n}\n</code></pre>"},{"location":"code/intro/","title":"Getting Started","text":"<p>The links in the menu on the left will guide you through the whole functionality of our library. Besides these links, there are several resources that you might find useful:</p> <ul> <li>blank project template</li> <li>several examples</li> <li>Doxygen documentation</li> </ul>"},{"location":"code/pmod/","title":"PMOD connector","text":"<p>The Logic v2 and newer has a PMOD connector, which is a standardized way to connect various peripherials.</p> <p>Info</p> <p>The 1.x HW revisions do not have PMOD connector.</p>"},{"location":"code/pmod/#pinout","title":"Pinout","text":"<p>Pinout is visible from the underside of the board as white labels.</p> <p>Warning</p> <p>The 5V label is wrong, and it should say <code>VCC</code> instead - the voltage is configurable, see below.</p> <p></p>"},{"location":"code/pmod/#voltage-setting","title":"Voltage setting","text":"<p>On the v2.0 HW revision, there are three pinheads to be used to set the voltage on PMOD VCC. They are unfortunatelly without labels, so here are photos of the 3.3 V and 5 V settings:</p> <p></p>"},{"location":"code/projects/","title":"Example projects","text":"<p>Below, you can find a set of example projects for Logic.</p>"},{"location":"code/projects/#example-projects-in-english","title":"Example projects in English","text":"<ul> <li>The pong game</li> <li>Simon says game</li> <li>Graphics: Generative design</li> <li>Graphics: Fire simulation</li> <li>Graphics: Knight Rider</li> <li>The snake game, several iterations with more evolved functionality<ul> <li>1. iteration</li> <li>2. iteration</li> <li>3. iteration</li> <li>4. iteration</li> </ul> </li> </ul>"},{"location":"code/projects/#example-projects-in-czech","title":"Example projects in Czech","text":"<ul> <li>Chessboard pattern</li> </ul>"},{"location":"code/projects/#inspiration","title":"Inspiration","text":"<p>Do you want to program something but you have no idea what should it be? Try one of the following project ideas.</p>"},{"location":"code/projects/#single-player-game","title":"Single player game","text":"<ul> <li>logic</li> <li>flappy bird</li> <li>maze</li> <li>platform game</li> <li>tick-tack-toe</li> <li>bomberman</li> <li>tetris</li> <li>asteroids</li> <li>mine sweeper</li> </ul>"},{"location":"code/projects/#multi-player-game","title":"Multi player game","text":"<ul> <li>battleships</li> <li>tick-tack-toe</li> <li>chess</li> <li>snake</li> <li>pong</li> </ul>"},{"location":"code/projects/#graphics","title":"Graphics","text":"<ul> <li>flashlight (adjustable brightness and color)</li> <li>fire</li> <li>rainbow</li> <li>various animations</li> </ul>"},{"location":"code/sdcard/","title":"SD card","text":"<p>The Logic v2 board has an sdcard slot which you can use to store or load data from FAT32-formatted cards.</p> <p>Info</p> <p>The 1.x HW revisions do not have SD card slot.</p> <p>SDMMC is broken</p> <p>On the 2.0 HW revision, the SDMMC mode is broken. You have to use SDSPI protocol to access the SD card. This will be fixed in a later HW revision.</p>"},{"location":"code/sdcard/#pinout","title":"Pinout","text":"Pin SD SPI SD MMC 11 MOSI CMD 12 SCLK CLK 13 MISO D0 3 CS CD"},{"location":"code/sdcard/#example-init-code","title":"Example init code","text":"<p>The SD card has some long-ish init code, but after that, you may use standard C or C++ functions to access the filesystem, just like on a desktop.</p> <pre><code>#include \"Logic.hpp\"\n#include &lt;iostream&gt;\n\n#include \"esp_vfs_fat.h\"\n#include &lt;dirent.h&gt;\n#include &lt;string.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;sys/unistd.h&gt;\n\n#define EXAMPLE_MAX_CHAR_SIZE 64\n\nstatic const char* TAG = \"example\";\n\n#define MOUNT_POINT \"/sdcard\"\n\nvoid logicMain() {\n    esp_err_t ret;\n\n    // SPI BUS init\n    spi_bus_config_t bus_cfg = {};\n    bus_cfg.mosi_io_num = GPIO_NUM_11;\n    bus_cfg.miso_io_num = GPIO_NUM_13;\n    bus_cfg.sclk_io_num = GPIO_NUM_12;\n    bus_cfg.quadwp_io_num = -1;\n    bus_cfg.quadhd_io_num = -1;\n    bus_cfg.max_transfer_sz = 4000;\n\n    ret = spi_bus_initialize(SPI2_HOST, &amp;bus_cfg, SPI_DMA_CH_AUTO);\n    if (ret != ESP_OK) {\n        ESP_LOGE(TAG, \"Failed to initialize bus.\");\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n        return;\n    }\n\n    /// FS options\n    esp_vfs_fat_mount_config_t mount_config = {};\n    mount_config.max_files = 5;\n    mount_config.allocation_unit_size = 16 * 1024;\n\n    sdmmc_card_t* card;\n    const char mount_point[] = MOUNT_POINT;\n    ESP_LOGI(TAG, \"Initializing SD card\");\n\n    // SDSPI init\n    sdmmc_host_t host = SDSPI_HOST_DEFAULT();\n    host.slot = SPI2_HOST;\n\n    sdspi_device_config_t dev_cfg = SDSPI_DEVICE_CONFIG_DEFAULT();\n    dev_cfg.gpio_cs = GPIO_NUM_3;\n\n    ESP_LOGI(TAG, \"Mounting filesystem\");\n    ret = esp_vfs_fat_sdspi_mount(mount_point, &amp;host, &amp;dev_cfg, &amp;mount_config, &amp;card);\n\n    if (ret != ESP_OK) {\n        if (ret == ESP_FAIL) {\n            ESP_LOGE(TAG, \"Failed to mount filesystem. \"\n                          \"If you want the card to be formatted, set the EXAMPLE_FORMAT_IF_MOUNT_FAILED menuconfig option.\");\n        } else {\n            ESP_LOGE(TAG, \"Failed to initialize the card (%s). \"\n                          \"Make sure SD card lines have pull-up resistors in place.\",\n                esp_err_to_name(ret));\n        }\n        return;\n    }\n    ESP_LOGI(TAG, \"Filesystem mounted\");\n\n    // List root directory\n    DIR* dir = opendir(mount_point);\n    struct dirent* ent;\n    while ((ent = readdir(dir)) != NULL) {\n        printf(\"File %s %d\\n\", ent-&gt;d_name, ent-&gt;d_type);\n    }\n    closedir(dir);\n\n    while (true) {\n        delay(100);\n    }\n}\n</code></pre>"},{"location":"code/statusBar/","title":"Status bar","text":"<p>Status bar is the top row of 5 LEDs marked as A-E.</p> <ul> <li><code>void setState(int state)</code> : Set progress</li> <li><code>int state()</code> : Return current state</li> <li><code>void setColor(Rgb color)</code> : Set the color of status bar</li> <li><code>Rgb color()</code> : Return current color of status bar</li> <li><code>void show(int intensity = 255)</code> : Show current frame/state</li> <li><code>void clear()</code> : Clear the display</li> <li><code>Rgb&amp; at(int x)</code> : Return pixel at given position</li> </ul>"},{"location":"code/statusBar/#example","title":"Example","text":"<pre><code>#include \"Logic.hpp\"\n#include &lt;iostream&gt;\n\nvoid logicMain() {\n    while (true) {\n        statusBar.setColor(Rgb(255, 0, 0));\n        statusBar.setState(4);\n\n        statusBar.show(30);\n        delay(3000);\n        statusBar.clear();\n\n        statusBar.setColor(Rgb(0, 255, 0));\n        statusBar.setState(2);\n\n        statusBar.show(30);\n        delay(3000);\n        statusBar.clear();\n\n        statusBar.at(4) = Rgb(0, 0, 255);\n\n        statusBar.show(30);\n        delay(3000);\n        statusBar.clear();\n\n        statusBar.at(0) = Rgb(255, 0, 0);\n        statusBar.at(1) = Rgb(0, 255, 0);\n        statusBar.at(2) = Rgb(0, 0, 255);\n\n        statusBar.show(30);\n        delay(3000);\n        statusBar.clear();\n    }\n}\n</code></pre>"},{"location":"code/utils/","title":"Utilities","text":""},{"location":"code/utils/#handling-time","title":"Handling time","text":"<ul> <li><code>void delay(uint32_t ms)</code> : Wait for the specified number of milliseconds</li> <li><code>void waitSeconds(float seconds)</code> : Wait for the specified number of seconds</li> <li><code>uint32_t millis()</code> : Returns time since boot in milliseconds</li> <li><code>float seconds()</code> : Returns time since boot in seconds</li> </ul>"},{"location":"cs/","title":"Logic","text":"<p>Logic je univerz\u00e1ln\u00ed programovateln\u00e1 hra\u010dka ur\u010den\u00e1 pro v\u00fduku programov\u00e1n\u00ed, kterou vyvinula Robot\u00e1rna.</p> <p>Logic p\u0159ipom\u00edn\u00e1 hern\u00ed konzoli. Je vybaven\u00fd 105 RGB LED diodami, kter\u00e9 mohou slou\u017eit jako displej, m\u00e1 mnoho tla\u010d\u00edtek a bzu\u010d\u00e1k. Vnit\u0159n\u00ed \u010d\u00e1st poh\u00e1n\u00ed mikro\u0159adi\u010d ESP32.</p> <p>D\u011bti (no, nejen ony) mohou vytv\u00e1\u0159et vlastn\u00ed hry a u\u010dit se p\u0159itom programovat. Je dokonce mo\u017en\u00e9 spou\u0161t\u011bt multiplayerov\u00e9 hry, proto\u017ee vestav\u011bn\u00fd procesor podporuje jak WiFi, tak Bluetooth 4.</p> <p>Tento projekt byl p\u0159ipraven pro Robotick\u00fd t\u00e1bor 2021 \u2013 str\u00e1nka je dostupn\u00e1, av\u0161ak v \u010de\u0161tin\u011b. Najdete tam v\u00edce projekt\u016f. M\u016f\u017eete se tak\u00e9 pod\u00edvat na n\u00e1\u0161 GitHub, kde se dozv\u00edte v\u00edce o na\u0161ich dal\u0161\u00edch projektech.</p>"},{"location":"cs/#verze-hw","title":"Verze HW","text":"<p>Existuje n\u011bkolik verz\u00ed HW, p\u0159i\u010dem\u017e druh\u00e1 verze p\u0159edstavuje z\u00e1sadn\u00ed p\u0159epracov\u00e1n\u00ed.</p>"},{"location":"cs/#seznam-zmen","title":"Seznam zm\u011bn:","text":""},{"location":"cs/#v20","title":"v2.0","text":"<ul> <li>nov\u00fd \u010dip ESP32 S3 (nam\u00edsto \"norm\u00e1ln\u00edho\" ESP32)</li> <li>slot pro SD kartu</li> <li>konektor PMOD (standardizovan\u00e9 rozhran\u00ed pro p\u0159ipojen\u00ed r\u016fzn\u00fdch periferi\u00ed)</li> <li>p\u0159epracovan\u00e9 uspo\u0159\u00e1d\u00e1n\u00ed tla\u010d\u00edtek s dv\u011bma sm\u011brov\u00fdmi k\u0159\u00ed\u017ei</li> <li>piezo m\u00edsto pouh\u00e9ho bzu\u010d\u00e1ku (tak\u017ee m\u016f\u017eete p\u0159ehr\u00e1vat r\u016fzn\u00e9 t\u00f3ny)</li> <li>jasn\u011bj\u0161\u00ed inteligentn\u00ed LED</li> </ul> Logic v2Logic v1"},{"location":"cs/install/#strucna-verze-pro-zkusene-vyvojare","title":"Stru\u010dn\u00e1 verze pro zku\u0161en\u00e9 v\u00fdvoj\u00e1\u0159e","text":"<p>Logic je \u0159\u00edzen\u00fd mikrokontrol\u00e9rem ESP32. Doporu\u010dujeme pou\u017e\u00edt n\u00e1stroj PlatformIO jako v\u00fdvojov\u00e9 prost\u0159ed\u00ed, proto\u017ee um\u00ed automaticky nainstalovat pot\u0159ebn\u00fd toolchain a dal\u0161\u00ed z\u00e1vislosti. Nav\u00edc se snadno integruje do mnoha existuj\u00edc\u00edch textov\u00fdch editor\u016f a IDE.</p> <p>Poskytujeme knihovnu ovlada\u010d\u016f pro desku. M\u016f\u017eete ji ve sv\u00fdch projektech v PlatformIO pou\u017e\u00edt tak, \u017ee do souboru <code>platformio.ini</code> p\u0159id\u00e1te tento \u0159\u00e1dek:</p> <pre><code>lib_deps = https://github.com/RoboticsBrno/Logic_library\n</code></pre> <p>Knihovna nab\u00edz\u00ed n\u011bkolik p\u0159\u00edklad\u016f, projektovou \u0161ablonu a dokumentaci. Tak\u00e9 je k dispozici rychl\u00fd p\u0159ehled v\u0161ech funkcionalit.</p>"},{"location":"cs/install/#krok-za-krokem","title":"Krok za krokem","text":"<p>Pokud jste za\u010d\u00e1te\u010dn\u00edci, mo\u017en\u00e1 v\u00e1m p\u0159ijde vhod n\u00e1sleduj\u00edc\u00ed podrobn\u00fd n\u00e1vod. Je prim\u00e1rn\u011b zam\u011b\u0159en\u00fd na u\u017eivatele Windows (jak v\u00edte, v\u0161e t\u00fdkaj\u00edc\u00ed se v\u00fdvoje je na tomto syst\u00e9mu obvykle slo\u017eit\u011bj\u0161\u00ed). Budete pot\u0159ebovat nainstalovat:</p> <ol> <li>Editor Visual Studio Code</li> <li>Python<ol> <li>Pro Windows 8 a vy\u0161\u0161\u00ed mus\u00edte st\u00e1hnout Python z Windows Store</li> <li>Pro Windows 7 pot\u0159ebujete Python 3.8.10</li> </ol> </li> <li>Git pro spr\u00e1vu verz\u00ed</li> <li>USB ovlada\u010de (Windows 7, Windows 8 a vy\u0161\u0161\u00ed)</li> <li>Plugin PlatformIO pro Visual Studio Code</li> </ol>"},{"location":"cs/install/#1-visual-studio-code","title":"1. Visual Studio Code","text":"<p>Toto je editor, ve kter\u00e9m budete upravovat sv\u00e9 programy. St\u00e1hn\u011bte jej odtud a nainstalujte.</p>"},{"location":"cs/install/#2-python","title":"2. Python","text":"<p>Po\u010d\u00edta\u010d mus\u00ed m\u00edt nainstalovan\u00fd Python.</p>"},{"location":"cs/install/#windows-8-windows-10","title":"Windows 8, Windows 10","text":"<p>Je nezbytn\u00e9, abyste Python nainstalovali p\u0159es Windows Store, jinak PlatformIO nebude fungovat spr\u00e1vn\u011b. M\u016f\u017eete pou\u017e\u00edt p\u0159\u00edm\u00fd odkaz do Windows Store.</p>"},{"location":"cs/install/#windows-7","title":"Windows 7","text":"<p>St\u00e1hn\u011bte Python 3.8 (nov\u011bj\u0161\u00ed verze Pythonu na Windows 7 nefunguj\u00ed) a nainstalujte jej. B\u011bhem instalace se ujist\u011bte, \u017ee je za\u0161krtnuto \"Add to PATH\".</p>"},{"location":"cs/install/#3-git","title":"3. Git","text":"<p>St\u00e1hn\u011bte Git a nainstalujte ho. V\u0161echny mo\u017enosti m\u016f\u017eete ponechat na v\u00fdchoz\u00edch hodnot\u00e1ch.</p>"},{"location":"cs/install/#4-ovladace-pro-logic","title":"4. Ovlada\u010de pro Logic","text":"<p>St\u00e1hn\u011bte ovlada\u010de:</p> <ul> <li>Windows 8, Windows 10</li> <li>Windows 7</li> </ul> <p>Je t\u0159eba rozbalit cel\u00fd archiv a spustit soubor <code>CP210xVCPInstaller_x64.exe</code>. Pot\u00e9 se \u0159\u00eddit zobrazen\u00fdm pr\u016fvodcem.</p>"},{"location":"cs/install/#5-platformio-ide-extension","title":"5. Platform.io IDE Extension","text":"<p>Otev\u0159ete Visual Studio Code a nainstalujte roz\u0161\u00ed\u0159en\u00ed PlatformIO:</p> <p> 1. Otev\u0159ete VSCode a vlevo klikn\u011bte na tla\u010d\u00edtko Extensions.</p> <p> 2. Nainstalujte roz\u0161\u00ed\u0159en\u00ed PlatformIO IDE.</p> <p> 3. Po\u010dkejte, ne\u017e se nainstaluj\u00ed v\u0161echny bal\u00ed\u010dky.</p> <p> 4. N\u00e1sledn\u011b vy\u010dkejte na instalaci PlatformIO Core. M\u016f\u017ee to chv\u00edli trvat.</p> <p> 5. Jakmile je v\u0161e dokon\u010deno, restartujte editor.</p>"},{"location":"cs/install/#6-hotovo","title":"6. Hotovo!","text":"<p>Nyn\u00ed byste m\u011bli b\u00fdt p\u0159ipraveni za\u010d\u00edt vyv\u00edjet vlastn\u00ed hry pro Logic! M\u016f\u017eete za\u010d\u00edt p\u0159\u00edkladov\u00fdmi projekty. Otev\u0159ete je pomoc\u00ed <code>File</code> -&gt; <code>Open Folder</code>.</p> <p> Po otev\u0159en\u00ed p\u0159\u00edkladu je pot\u0159eba nastavit verzi Logic. Klikn\u011bte na <code>Defaul &lt;PROJECT&gt;</code> a vyberte svou verzi Logic.</p> <p> Pot\u00e9 m\u016f\u017eete p\u0159\u00edklad zkompilovat a nahr\u00e1t do sv\u00e9ho Logic. K tomu pou\u017eijte tla\u010d\u00edtka v lev\u00e9m doln\u00edm rohu.</p>"},{"location":"cs/manual/","title":"N\u00e1vod na sestaven\u00ed","text":"<p> 1. P\u0159iprav\u00edme si pot\u0159ebn\u00fd materi\u00e1l podle fotky</p> <p> 2. Vlo\u017e\u00edme piezo do desky podle obr\u00e1zku (pozor na oto\u010den\u00ed sou\u010d\u00e1stky)</p> <p> 3. P\u0159ip\u00e1j\u00edme piezo k desce</p> <p> 4. Pomoc\u00ed \u0161t\u00edpac\u00edch kle\u0161t\u00ed zast\u0159ihneme p\u0159e\u010dn\u00edvaj\u00edc\u00ed no\u017ei\u010dky</p> <p> 5. Ust\u0159ihneme si dutinky a pinheady podle zad\u00e1n\u00ed.     - 2x pinhead a dutinky o d\u00e9lce 4 piny     - 1x pinhead a dutinky o d\u00e9lce 7 pin\u016f </p> <p> 6.  Pomoc\u00ed zalamovac\u00edho no\u017ee si opatrn\u011b za\u010dist\u00edme okraje</p> <p> 7. Za\u010di\u0161t\u011bn\u00e9 d\u00edlky</p> <p> 8.  Pinheady zastr\u010d\u00edme del\u0161\u00ed stranou do dutinek</p> <p> 9. Zastr\u010d\u00edme d\u00edlky do desky dutinkami nap\u0159ed. Nachyst\u00e1me si 4 \u0161roubky</p> <p> 10.  Vlo\u017e\u00edme \u0161roubky do desky a nachyst\u00e1me si podlo\u017eky</p> <p> 11. Vlo\u017e\u00edme na \u0161rouby nachystan\u00e9 podlo\u017eky</p> <p> 12.   Nachyst\u00e1me si 4 distan\u010dn\u00ed sloupky a na\u0161roubujeme je na \u0161rouby</p> <p> 13.  Nachyst\u00e1me si podlo\u017eky</p> <p> 14.  Podlo\u017eky polo\u017e\u00edme na distan\u010dn\u00ed sloupky a p\u0159iprav\u00edme si dal\u0161\u00ed desku</p> <p> 15.  Desky nasad\u00edme na sebe tak, aby n\u00e1m sed\u011bly d\u00edry a pinheady</p> <p> 16. P\u0159iprav\u00edme si 4 \u0161roubky</p> <p> 17. P\u0159i\u0161roubujeme vrchn\u00ed desku (pozor na podlo\u017eky)</p> <p> 18.  Zkontrolujte si, \u017ee pinheady sm\u011b\u0159uj\u00ed k vrchn\u00ed desce s ledkami a dutinky le\u017e\u00ed na spodn\u00ed desce</p> <p> 19.  Zap\u00e1j\u00edme pinheady na horn\u00ed stran\u011b Logicu</p> <p> 20.  Zap\u00e1j\u00edme dutinky na spodn\u00ed stran\u011b Logicu</p> <p> 21. Hotov\u00fd logic zep\u0159edu</p> <p> 22. Hotov\u00fd logic zezadu</p>"},{"location":"cs/code/buttons/","title":"Tla\u010d\u00edtka","text":""},{"location":"cs/code/buttons/#prime-cteni-tlacitek","title":"P\u0159\u00edm\u00e9 \u010dten\u00ed tla\u010d\u00edtek","text":"<ul> <li><code>buttons.read(gpio_num_t gpio)</code> : </li> </ul>"},{"location":"cs/code/buttons/#nazvy-tlacitek","title":"N\u00e1zvy tla\u010d\u00edtek","text":"<ul> <li><code>Enter</code></li> <li><code>Up</code></li> <li><code>Down</code></li> <li><code>Left</code></li> <li><code>Right</code></li> <li><code>LeftUp</code></li> <li><code>LeftDown</code></li> <li><code>RightUp</code></li> <li><code>RightDown</code></li> </ul>"},{"location":"cs/code/buttons/#priklad-pouziti","title":"P\u0159\u00edklad pou\u017eit\u00ed","text":"<pre><code>#include \"Logic.hpp\"\n#include &lt;iostream&gt;\n\nvoid logicMain() {\n    while (true) {\n        display.clear();\n\n        if(buttons.read(Enter)) {\n            display.drawSquareFilled(3, 3, 4, Rgb(255, 255, 255));    \n        }\n        else if(buttons.read(Right)) {\n            display.drawSquareFilled(6, 3, 4, Rgb(255, 255, 255));\n        }\n        else if(buttons.read(Down)) {\n            display.drawSquareFilled(3, 6, 4, Rgb(255, 255, 255));\n        }\n        else if(buttons.read(Left)) {\n            display.drawSquareFilled(0, 3, 4, Rgb(255, 255, 255));\n        }\n        else if(buttons.read(Up)) {\n            display.drawSquareFilled(3, 0, 4, Rgb(255, 255, 255));\n        }\n        display.show(30);\n    }\n}\n</code></pre>"},{"location":"cs/code/buttons/#registrace-udalosti-na-tlacitka","title":"Registrace ud\u00e1lost\u00ed na tla\u010d\u00edtka","text":""},{"location":"cs/code/buttons/#buttonsprizmene-buttonsonchange","title":"buttons.priZmene (buttons.onChange)","text":"<pre><code>buttons.priZmene([](std::bitset&lt;MaxID&gt; aktualniStav, std::bitset&lt;MaxID&gt; zmenenaTlacitka) {\n    if (zmenenaTlacitka[Up] == 1) {\n\n        std::cout &lt;&lt; \"Tla\u010d\u00edtko Nahoru se zm\u011bnilo a te\u010f je \";\n\n        if (aktualniStav[Up] == 1) {\n            std::cout &lt;&lt; \"zm\u00e1\u010dknut\u00e9.\" &lt;&lt; std::endl;\n        } else {\n            std::cout &lt;&lt; \"pu\u0161t\u011bn\u00e9.\" &lt;&lt; std::endl;\n        }\n    }\n});\n\nbuttons.priZmene([](std::bitset&lt;MaxID&gt; aktualniStav) {\n    std::cout &lt;&lt; \"Tla\u010d\u00edtko Nahoru je nyn\u00ed \";\n\n    if (aktualniStav[Up] == 1) {\n        std::cout &lt;&lt; \"zm\u00e1\u010dknut\u00e9.\" &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; \"pu\u0161t\u011bn\u00e9.\" &lt;&lt; std::endl;\n    }\n});\n\nbuttons.priZmene([]() {\n    std::cout &lt;&lt; \"Tla\u010d\u00edtko bylo zm\u011bn\u011bno. Nen\u00ed k dispozici v\u00edce informac\u00ed.\" &lt;&lt; std::endl;\n});\n\nbuttons.priZmene([](std::bitset&lt;MaxID&gt; aktualniStav, std::bitset&lt;MaxID&gt; zmenenaTlacitka) {\n    std::cout &lt;&lt; \"Tohle uvid\u00edte pouze pokud se zm\u011bn\u00ed tla\u010d\u00edtko Dol\u016f, a toto tla\u010d\u00edtko je nyn\u00ed \";\n\n    if (aktualniStav[Down] == 1) {\n        std::cout &lt;&lt; \"zm\u00e1\u010dknut\u00e9.\" &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; \"pu\u0161t\u011bn\u00e9.\" &lt;&lt; std::endl;\n    }\n}, Down);\n\nbuttons.priZmene([](bool isPressed) {\n    std::cout &lt;&lt; \"Tohle uvid\u00edte pouze pokud se zm\u011bn\u00ed tla\u010d\u00edtko Dol\u016f\" &lt;&lt; std::endl;\n\n    if (isPressed == 1) {\n        std::cout &lt;&lt; \"zm\u00e1\u010dknut\u00e9.\" &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; \"pu\u0161t\u011bn\u00e9.\" &lt;&lt; std::endl;\n    }\n}, Down);\n\n\nbuttons.onChange([]() {\n    std::cout &lt;&lt; \"Tohle uvid\u00edte pouze pokud se zm\u011bn\u00ed tla\u010d\u00edtko Dol\u016f\" &lt;&lt; std::endl;\n}, Down);\n</code></pre>"},{"location":"cs/code/buttons/#buttonspristisku-buttonsonpress","title":"buttons.priStisku (buttons.onPress)","text":"<pre><code>buttons.priStisku([](std::bitset&lt;MaxID&gt; aktualniStav, std::bitset&lt;MaxID&gt; zmena) {\n    std::cout &lt;&lt; \"N\u011bjak\u00e9 tla\u010d\u00edtko bylo zm\u00e1\u010dknuto. \";\n\n    if (zmena[Right] == 1) {\n        std::cout &lt;&lt; \"Bylo to tla\u010d\u00edtko Vpravo\" &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; \"Nebylo to tla\u010d\u00edtko Vpravo\" &lt;&lt; std::endl;\n    }\n});\n\nbuttons.priStisku([](std::bitset&lt;MaxID&gt; aktualniStav) {\n    std::cout &lt;&lt; \"N\u011bjak\u00e9 tla\u010d\u00edtko bylo zm\u00e1\u010dknuto. \";\n\n    std::cout &lt;&lt; \"Tla\u010d\u00edtka \";\n\n    for(int i = 0; i &lt; MaxID; i++) {\n        if (aktualniStav[i] == 1) {\n            std::cout &lt;&lt; i &lt;&lt; \", \";\n        }\n    }\n\n    std::cout &lt;&lt; \"jsou nyn\u00ed zm\u00e1\u010dknut\u00e1.\" &lt;&lt; std::endl;\n});\n\nbuttons.priStisku([]() {\n    std::cout &lt;&lt; \"Tla\u010d\u00edtko bylo Zm\u00e1\u010dknuto. Nen\u00ed k dispozici v\u00edce informac\u00ed.\" &lt;&lt; std::endl;\n});\n\nbuttons.priStisku([]() {\n    std::cout &lt;&lt; \"Tohle uvid\u00edte pouze pokud zm\u00e1\u010dknete tla\u010d\u00edtko Vlevo.\" &lt;&lt; std::endl;\n}, Left);\n</code></pre>"},{"location":"cs/code/buttons/#buttonspriuvolneni-onrelease","title":"buttons.priUvolneni (.onRelease)","text":"<pre><code>buttons.priUvolneni([](std::bitset&lt;MaxID&gt; aktualniStav, std::bitset&lt;MaxID&gt; zmena) {\n    std::cout &lt;&lt; \"Tla\u010d\u00edtko bylo pu\u0161t\u011bno. \";\n\n    if (zmena[Right] == 1) {\n        std::cout &lt;&lt; \"Bylo to tla\u010d\u00edtko Vpravo\" &lt;&lt; std::endl;\n    } else {\n        std::cout &lt;&lt; \"Nebylo to tla\u010d\u00edtko Vpravo\" &lt;&lt; std::endl;\n    }\n});\n\nbuttons.priUvolneni([](std::bitset&lt;MaxID&gt; aktualniStav) {\n    std::cout &lt;&lt; \"Tla\u010d\u00edtko bylo pu\u0161t\u011bno. \";\n\n    std::cout &lt;&lt; \"Tla\u010d\u00edtka \";\n\n    for(int i = 0; i &lt; MaxID; i++) {\n        if (aktualniStav[i] == 0) {\n            std::cout &lt;&lt; i &lt;&lt; \", \";\n        }\n    }\n\n    std::cout &lt;&lt; \"jsou nyn\u00ed pu\u0161t\u011bn\u00e1.\" &lt;&lt; std::endl;\n});\n\nbuttons.priUvolneni([]() {\n    std::cout &lt;&lt; \"Tla\u010d\u00edtko bylo uvoln\u011bno. Nen\u00ed k dispozici v\u00edce informac\u00ed.\" &lt;&lt; std::endl;\n});\n\nbuttons.priUvolneni([]() {\n    std::cout &lt;&lt; \"Tohle uvid\u00edte pouze pokud pust\u00edte tla\u010d\u00edtko Vlevo.\" &lt;&lt; std::endl;\n}, Left);\n</code></pre>"},{"location":"cs/code/buzzer/#example-usage","title":"Example usage","text":""},{"location":"cs/code/buzzer/#logic-v2","title":"\"Logic v2.*\"","text":"<ul> <li><code>bool isOn()</code> :</li> <li><code>void on()</code> :</li> <li><code>void off()</code> :</li> <li><code>void setFrequency(std::uint32_t frequency)</code> :<ul> <li>This function sets the frequency of the buzzer. The frequency is in Hz.</li> </ul> </li> </ul> <pre><code>#include \"Logic.hpp\"\n#include &lt;iostream&gt;\n\nvoid logicMain() {\n    while (true) {\n        if(buttons.read(Enter)) {\n            buzzer.on();\n        } else\n        {\n            buzzer.off();\n        }\n    }\n\n}\n</code></pre>"},{"location":"cs/code/buzzer/#logic-v1","title":"\"Logic v1.*\"","text":"<ul> <li><code>bool isOn()</code> :</li> <li><code>void on()</code> :</li> <li><code>void off()</code> :</li> </ul> <pre><code>#include \"Logic.hpp\"\n#include &lt;iostream&gt;\n\nvoid logicMain() {\n    while (true) {\n        if(buttons.read(Enter)) {\n            buzzer.on();\n        } else\n        {\n            buzzer.off();\n        }\n    }\n\n}\n</code></pre>"},{"location":"cs/code/display/","title":"Displej","text":"<ul> <li> <p><code>Rgb&amp; pozice(int x, int y)</code> (<code>Rgb&amp; at()</code>):    Vr\u00e1t\u00ed pixel na dan\u00e9 pozici</p> </li> <li> <p><code>void nastavBarvu(int x, int y, Rgb color)</code> (<code>void setColor()</code>):  Nastav\u00ed barvu pixelu na dan\u00e9 pozici</p> </li> <li> <p><code>void vycisti()</code> (<code>void clear()</code>): Vy\u010dist\u00ed cel\u00fd displej</p> </li> <li> <p><code>void vypln(Rgb barva)</code> (<code>void fill()</code>):  Vypl\u0148 cel\u00fd displej barvou</p> </li> <li> <p><code>void nakresliObdelnik(int x, int y, int sirka, int vyska, Rgb barva, int tloustkaCary = 1)</code> (<code>void drawRectangle()</code>): Nakresl\u00ed obd\u00e9ln\u00edk se zadan\u00fdmi parametry</p> </li> <li> <p><code>void nakresliObdelnik(const Obdelnik&amp; obdelnik, Rgb barva, int tloustkaCary = 1)</code> (<code>void drawRectangle()</code>):  Nakresl\u00ed obd\u00e9ln\u00edk se zadan\u00fdmi parametry</p> </li> <li> <p><code>void nakresliObdelnikVyplneny(int x, int y, int sirka, int vyska, Rgb barva)</code> (<code>void drawRectangleFilled()</code>):    Nakresl\u00ed vypln\u011bn\u00fd obd\u00e9ln\u00edk se zadan\u00fdmi parametry</p> </li> <li> <p><code>void nakresliObdelnikVyplneny(const Obdelnik&amp; obdelnik, Rgb barva)</code> (<code>void drawRectangleFilled()</code>): Nakresl\u00ed vypln\u011bn\u00fd obd\u00e9ln\u00edk se zadan\u00fdmi parametry</p> </li> <li> <p><code>void nakresliCtverec(int x, int y, int strana, Rgb barva, int tlouskaCary = 1)</code> (<code>void drawSquare()</code>): Nakresl\u00ed \u010dtverec se zadan\u00fdmi parametry</p> </li> <li> <p><code>void nakresliCtverecVyplneny(int x, int y, int strana, Rgb barva)</code> (<code>void drawSquareFilled()</code>):  Nakresl\u00ed \u010dtverec se zadan\u00fdmi parametry</p> </li> <li> <p><code>void nakresliKruznici(int stredX, int stredY, int polomer, Rgb barva)</code> (<code>void drawCircle()</code>):    Nakresl\u00ed kru\u017enici s dan\u00fdmi parametry</p> </li> <li> <p><code>void nakresliKruzniciVyplnenou(int stredX, int stredY, int polomer, Rgb barva)</code> (<code>void drawCircleFilled()</code>): Nakresl\u00ed vypln\u011bnou kru\u017enici (kruh) s dan\u00fdmi parametry</p> </li> <li> <p><code>void nakresliCaru(int x1, int y1, int x2, int y2, Rgb barva, int tloustkaCary = 1)</code> (<code>void drawLine()</code>): Nakresl\u00ed \u010d\u00e1ru</p> </li> <li> <p><code>void ukaz(int intenzita = 255)</code> (<code>void show()</code>): Vykresli p\u0159ipraven\u00fd sn\u00edmek na displeji</p> </li> </ul>"},{"location":"cs/code/display/#priklad-pouziti","title":"P\u0159\u00edklad pou\u017eit\u00ed","text":"<pre><code>#include \"Logic.hpp\"\n#include &lt;iostream&gt;\n\nvoid logicMain() {\n    while (true)\n    {\n        display.fill(Rgb(255, 0, 0)); //red\n\n        display.show(30);\n        delay(3000);\n        display.clear();\n\n        display.drawLine(1, 0, 8, 0, Rgb(255, 0, 0)); // red\n        display.drawLine(0, 1, 8, 9, Rgb(0, 255, 0)); // green\n\n        display.show(30);\n        delay(3000);\n        display.clear();\n\n        display.drawRectangle(0, 1, 8, 4, Rgb(255, 0, 0)); // red\n        display.drawRectangle(4, 3, 6, 5, Rgb(0, 255, 0)); // green\n\n        display.show(30);\n        delay(3000);\n        display.clear();\n\n        display.drawRectangleFilled(0, 1, 8, 4, Rgb(255, 0, 0)); // red\n        display.drawRectangleFilled(4, 3, 6, 5, Rgb(0, 255, 0)); // green\n\n        display.show(30);\n        delay(3000);\n        display.clear();\n\n        display.drawCircle(3, 3, 2, Rgb(255, 0, 0)); // red\n        display.drawCircle(6, 7, 3, Rgb(0, 255, 0)); // green\n\n        display.show(30);\n        delay(3000);\n        display.clear();\n\n        display.drawCircleFilled(3, 3, 2, Rgb(255, 0, 0)); // red\n        display.drawCircleFilled(6, 7, 3, Rgb(0, 255, 0)); // green\n\n        display.show(30);\n        delay(3000);\n        display.clear();\n\n        display.drawSquare(1, 1, 3, Rgb(255, 0, 0)); //red\n        display.drawSquare(4, 5, 4, Rgb(0, 255, 0)); // green\n\n        display.show(30);\n        delay(3000);\n        display.clear();\n\n        display.drawSquareFilled(1, 1, 3, Rgb(255, 0, 0)); //red\n        display.drawSquareFilled(4, 5, 4, Rgb(0, 255, 0)); // green\n\n        display.show(30);\n        delay(3000);\n        display.clear();\n\n        display.at(0, 0) = Rgb(255, 0, 0); // red\n        display.at(4, 7) = Rgb(0, 255, 0); // green\n    }\n}\n</code></pre>"},{"location":"cs/code/intro/","title":"Za\u010d\u00edn\u00e1me","text":"<p>Odkazy v menu nalevo v\u00e1s provedou celou funkcionalitou na\u0161\u00ed knihovny. Krom\u011b t\u011bchto odkaz\u016f existuje n\u011bkolik zdroj\u016f, kter\u00e9 byste mohli pova\u017eovat za u\u017eite\u010dn\u00e9:</p> <ul> <li>pr\u00e1zdn\u00e1 projektov\u00e1 \u0161ablona</li> <li>n\u011bkolik p\u0159\u00edklad\u016f</li> <li>Doxygen dokumentace</li> </ul>"},{"location":"cs/code/pmod/","title":"PMOD konektor","text":"<p>Logic v2 a nov\u011bj\u0161\u00ed m\u00e1 PMOD konektor, kter\u00fd je standardizovan\u00fdm zp\u016fsobem pro p\u0159ipojen\u00ed r\u016fzn\u00fdch periferi\u00ed.</p> <p>Info</p> <p>HW revize 1.x nemaj\u00ed PMOD konektor.</p>"},{"location":"cs/code/pmod/#zapojeni-pinu","title":"Zapojen\u00ed pin\u016f","text":"<p>Zapojen\u00ed pin\u016f je vyzna\u010deno na spodn\u00ed stran\u011b desky b\u00edl\u00fdmi popisky.</p> <p>Warning</p> <p>Popisek 5V je chybn\u00fd a m\u011bl by m\u00edsto toho b\u00fdt <code>VCC</code> \u2013 nap\u011bt\u00ed je mo\u017en\u00e9 konfigurovat, viz n\u00ed\u017ee.</p> <p></p>"},{"location":"cs/code/pmod/#nastaveni-napeti","title":"Nastaven\u00ed nap\u011bt\u00ed","text":"<p>U HW revize v2.0 se nach\u00e1z\u00ed t\u0159i pinov\u00e9 li\u0161ty pro nastaven\u00ed nap\u011bt\u00ed na PMOD VCC. Bohu\u017eel nejsou ozna\u010den\u00e9, tak\u017ee zde jsou fotografie nastaven\u00ed pro 3,3 V a 5 V:</p> <p></p>"},{"location":"cs/code/projects/","title":"Uk\u00e1zkov\u00e9 projekty","text":"<p>N\u00ed\u017ee najdete sadu uk\u00e1zkov\u00fdch projekt\u016f pro Logic.</p>"},{"location":"cs/code/projects/#ukazkove-projekty-v-anglictine","title":"Uk\u00e1zkov\u00e9 projekty v angli\u010dtin\u011b","text":"<ul> <li>Hra Pong</li> <li>Hra Simon says</li> <li>Grafika: Generative design</li> <li>Grafika: Simulace ohn\u011b</li> <li>Grafika: Knight Rider</li> <li>Hra Snake (had), n\u011bkolik iterac\u00ed s postupn\u011b roz\u0161i\u0159ovanou funkcionalitou:<ul> <li>1. iterace</li> <li>2. iterace</li> <li>3. iterace</li> <li>4. iterace</li> </ul> </li> </ul>"},{"location":"cs/code/projects/#ukazkove-projekty-v-cestine","title":"Uk\u00e1zkov\u00e9 projekty v \u010de\u0161tin\u011b","text":"<ul> <li>\u0160achovnicov\u00fd vzor</li> </ul>"},{"location":"cs/code/projects/#inspirace","title":"Inspirace","text":"<p>Chcete n\u011bco naprogramovat, ale chyb\u00ed v\u00e1m n\u00e1pady? Vyzkou\u0161ejte jeden z n\u00e1sleduj\u00edc\u00edch projektov\u00fdch n\u00e1pad\u016f.</p>"},{"location":"cs/code/projects/#hra-pro-jednoho-hrace","title":"Hra pro jednoho hr\u00e1\u010de","text":"<ul> <li>logic</li> <li>flappy bird</li> <li>bludi\u0161t\u011b (maze)</li> <li>plo\u0161inovka (platform game)</li> <li>pi\u0161kvorky (tick-tack-toe)</li> <li>bomberman</li> <li>tetris</li> <li>asteroids</li> <li>minesweeper</li> </ul>"},{"location":"cs/code/projects/#hra-pro-vice-hracu","title":"Hra pro v\u00edce hr\u00e1\u010d\u016f","text":"<ul> <li>lod\u011b (battleships)</li> <li>pi\u0161kvorky (tick-tack-toe)</li> <li>\u0161achy</li> <li>snake</li> <li>pong</li> </ul>"},{"location":"cs/code/projects/#grafika","title":"Grafika","text":"<ul> <li>baterka (nastaviteln\u00fd jas a barva)</li> <li>ohe\u0148</li> <li>duhov\u00fd efekt</li> <li>r\u016fzn\u00e9 animace</li> </ul>"},{"location":"cs/code/sdcard/","title":"SD karta","text":"<p>Deska Logic v2 je vybavena slotem pro SD kartu, kter\u00fd m\u016f\u017eete pou\u017e\u00edt ke \u010dten\u00ed nebo z\u00e1pisu dat na kartu s FAT32 form\u00e1tem.</p> <p>Info</p> <p>HW revize 1.x nemaj\u00ed slot na SD kartu.</p> <p>SDMMC je nefunk\u010dn\u00ed</p> <p>U HW revize 2.0 je re\u017eim SDMMC nefunk\u010dn\u00ed. K p\u0159\u00edstupu na SD kartu je nutn\u00e9 pou\u017e\u00edt protokol SDSPI. Tato chyba bude opravena v pozd\u011bj\u0161\u00ed HW revizi.</p>"},{"location":"cs/code/sdcard/#zapojeni-pinu","title":"Zapojen\u00ed pin\u016f","text":"Pin SD SPI SD MMC 11 MOSI CMD 12 SCLK CLK 13 MISO D0 3 CS CD"},{"location":"cs/code/sdcard/#ukazkovy-inicializacni-kod","title":"Uk\u00e1zkov\u00fd inicializa\u010dn\u00ed k\u00f3d","text":"<p>Pro SD kartu je zapot\u0159eb\u00ed del\u0161\u00ed k\u00f3d pro inicializaci, ale pot\u00e9 m\u016f\u017eete pou\u017e\u00edvat standardn\u00ed funkce jazyka C nebo C++ pro p\u0159\u00edstup k souborov\u00e9mu syst\u00e9mu, podobn\u011b jako na b\u011b\u017en\u00e9m po\u010d\u00edta\u010di.</p> <pre><code>#include \"Logic.hpp\"\n#include &lt;iostream&gt;\n\n#include \"esp_vfs_fat.h\"\n#include &lt;dirent.h&gt;\n#include &lt;string.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;sys/unistd.h&gt;\n\n#define EXAMPLE_MAX_CHAR_SIZE 64\n\nstatic const char* TAG = \"example\";\n\n#define MOUNT_POINT \"/sdcard\"\n\nvoid logicMain() {\n    esp_err_t ret;\n\n    // Inicializace SPI sb\u011brnice\n    spi_bus_config_t bus_cfg = {};\n    bus_cfg.mosi_io_num = GPIO_NUM_11;\n    bus_cfg.miso_io_num = GPIO_NUM_13;\n    bus_cfg.sclk_io_num = GPIO_NUM_12;\n    bus_cfg.quadwp_io_num = -1;\n    bus_cfg.quadhd_io_num = -1;\n    bus_cfg.max_transfer_sz = 4000;\n\n    ret = spi_bus_initialize(SPI2_HOST, &amp;bus_cfg, SPI_DMA_CH_AUTO);\n    if (ret != ESP_OK) {\n        ESP_LOGE(TAG, \"Nepoda\u0159ilo se inicializovat sb\u011brnici.\");\n        vTaskDelay(1000 / portTICK_PERIOD_MS);\n        return;\n    }\n\n    /// Mo\u017enosti pro souborov\u00fd syst\u00e9m\n    esp_vfs_fat_mount_config_t mount_config = {};\n    mount_config.max_files = 5;\n    mount_config.allocation_unit_size = 16 * 1024;\n\n    sdmmc_card_t* card;\n    const char mount_point[] = MOUNT_POINT;\n    ESP_LOGI(TAG, \"Inicializace SD karty\");\n\n    // Inicializace SDSPI\n    sdmmc_host_t host = SDSPI_HOST_DEFAULT();\n    host.slot = SPI2_HOST;\n\n    sdspi_device_config_t dev_cfg = SDSPI_DEVICE_CONFIG_DEFAULT();\n    dev_cfg.gpio_cs = GPIO_NUM_3;\n\n    ESP_LOGI(TAG, \"P\u0159ipojov\u00e1n\u00ed souborov\u00e9ho syst\u00e9mu\");\n    ret = esp_vfs_fat_sdspi_mount(mount_point, &amp;host, &amp;dev_cfg, &amp;mount_config, &amp;card);\n\n    if (ret != ESP_OK) {\n        if (ret == ESP_FAIL) {\n            ESP_LOGE(TAG, \"Nepoda\u0159ilo se p\u0159ipojit souborov\u00fd syst\u00e9m. \"\n                          \"Pokud chcete kartu naform\u00e1tovat, aktivujte volbu EXAMPLE_FORMAT_IF_MOUNT_FAILED v menuconfig.\");\n        } else {\n            ESP_LOGE(TAG, \"Nepoda\u0159ilo se inicializovat kartu (%s). \"\n                          \"Ujist\u011bte se, \u017ee linky SD karty maj\u00ed zapojen\u00e9 pull-up rezistory.\",\n                esp_err_to_name(ret));\n        }\n        return;\n    }\n    ESP_LOGI(TAG, \"Souborov\u00fd syst\u00e9m byl p\u0159ipojen\");\n\n    // Vyps\u00e1n\u00ed obsahu ko\u0159enov\u00e9ho adres\u00e1\u0159e\n    DIR* dir = opendir(mount_point);\n    struct dirent* ent;\n    while ((ent = readdir(dir)) != NULL) {\n        printf(\"Soubor %s %d\\n\", ent-&gt;d_name, ent-&gt;d_type);\n    }\n    closedir(dir);\n\n    while (true) {\n        delay(100);\n    }\n}\n</code></pre>"},{"location":"cs/code/statusBar/","title":"Stavov\u00fd \u0159\u00e1dek","text":"<p>Stavov\u00fd \u0159\u00e1dek je horn\u00ed \u0159ada 5 LED ozna\u010den\u00fdch jako A-E.</p> <ul> <li><code>void setState(int state)</code> : Nastav\u00ed \u201epostup\u201c (stav)</li> <li><code>int state()</code> : Vr\u00e1t\u00ed aktu\u00e1ln\u00ed stav</li> <li><code>void setColor(Rgb color)</code> : Nastav\u00ed barvu stavov\u00e9ho \u0159\u00e1dku</li> <li><code>Rgb color()</code> : Vr\u00e1t\u00ed aktu\u00e1ln\u00ed barvu stavov\u00e9ho \u0159\u00e1dku</li> <li><code>void show(int intensity = 255)</code> : Zobraz\u00ed aktu\u00e1ln\u00ed stav/\u201esn\u00edmek\u201c</li> <li><code>void clear()</code> : Vyma\u017ee zobrazen\u00ed</li> <li><code>Rgb&amp; at(int x)</code> : Vr\u00e1t\u00ed pixel na dan\u00e9 pozici</li> </ul>"},{"location":"cs/code/statusBar/#priklad","title":"P\u0159\u00edklad","text":"<pre><code>#include \"Logic.hpp\"\n#include &lt;iostream&gt;\n\nvoid logicMain() {\n    while (true) {\n        statusBar.setColor(Rgb(255, 0, 0));\n        statusBar.setState(4);\n\n        statusBar.show(30);\n        delay(3000);\n        statusBar.clear();\n\n        statusBar.setColor(Rgb(0, 255, 0));\n        statusBar.setState(2);\n\n        statusBar.show(30);\n        delay(3000);\n        statusBar.clear();\n\n        statusBar.at(4) = Rgb(0, 0, 255);\n\n        statusBar.show(30);\n        delay(3000);\n        statusBar.clear();\n\n        statusBar.at(0) = Rgb(255, 0, 0);\n        statusBar.at(1) = Rgb(0, 255, 0);\n        statusBar.at(2) = Rgb(0, 0, 255);\n\n        statusBar.show(30);\n        delay(3000);\n        statusBar.clear();\n    }\n}\n</code></pre>"},{"location":"cs/code/utils/","title":"Pomocn\u00e9 funkce","text":""},{"location":"cs/code/utils/#prace-s-casem","title":"Pr\u00e1ce s \u010dasem","text":"<ul> <li><code>void delay(uint32_t ms)</code> : Po\u010dk\u00e1 po stanovenou dobu v milisekund\u00e1ch</li> <li><code>void waitSeconds(float seconds)</code> : Po\u010dk\u00e1 po stanovenou dobu v sekund\u00e1ch</li> <li><code>uint32_t millis()</code> : Vr\u00e1t\u00ed po\u010det milisekund od startu</li> <li><code>float seconds()</code> : Vr\u00e1t\u00ed po\u010det sekund od startu</li> </ul>"}]}